package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private JoinPredicate m_joinPred;
    private DbIterator m_leftItr;
    private DbIterator m_rightItr;
    private Tuple m_left;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here - done?
        m_joinPred = p;
        m_leftItr = child1;
        m_rightItr = child2;
        m_left = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here - done
        return m_joinPred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here - done
        return m_leftItr.getTupleDesc().getFieldName(m_joinPred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here - done
        return m_rightItr.getTupleDesc().getFieldName(m_joinPred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here - done?
        return TupleDesc.merge(m_leftItr.getTupleDesc(), m_rightItr.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException, TransactionAbortedException {
        // some code goes here - done?
        super.open();
        m_leftItr.open();
        m_rightItr.open();
    }

    public void close() {
        // some code goes here - done?
        super.close();
        m_rightItr.close();
        m_leftItr.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here - done?
        m_leftItr.rewind();
        m_rightItr.rewind();
    }
    
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here - done? jk prob not fml
        while(m_leftItr.hasNext()) { // find cross product
            Tuple m_leftt;
            if (m_left != null) {
                m_leftt = m_left;
            }
            else {
                m_left = m_leftItr.next();
                m_leftt = m_left;
            }
            while (m_rightItr.hasNext()) {
                Tuple m_rightt = m_rightItr.next();
                if (m_joinPred.filter(m_leftt, m_rightt)) {
                    TupleDesc ltd = m_leftt.getTupleDesc();
                    TupleDesc rtd = m_rightt.getTupleDesc();
                    TupleDesc crosstd = TupleDesc.merge(ltd, rtd);
                    Tuple crosst = new Tuple(crosstd);
                    
                    for (int i = 0; i < ltd.numFields(); i++)
                        crosst.setField(i, m_leftt.getField(i));
                    for (int i = ltd.numFields(); i < ltd.numFields() + rtd.numFields(); i++)
                        crosst.setField(i, m_rightt.getField(i - ltd.numFields()));
                    
                    return crosst;
                }
            }
            m_rightItr.rewind();
            m_left = null;
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] { m_leftItr, m_rightItr };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here - done?
        m_leftItr = children[0];
        m_rightItr = children[1];
    }

}
